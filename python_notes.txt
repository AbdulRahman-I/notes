Python

Variable scope
A Python statement can access variables in a local scope as well as in the global scope. 
If some local and the global variable have the same name, the local variable shadows the global variable. 
Every function has its own local scope. The local variables in the function are the variables that are declared in that function.
The nonlocal variables of a function are those that are visible in the function but not declared there. generally we use the nonlocal variables inside nested functions.

Global Variable
+++++++++++++++
x = "value"

def func():
  global x
  print (x)
  x = "inner value"
  print (x)

func()
print (x)

#O
value
inner value
inner value

NonLocal Variable
+++++++++++++++++
x = 20

def func():
  x = 50
  def inner():
    nonlocal x
    x = 100
  print ("1st :",x)
  inner()
  print ("2nd :",x)

func()
print ("3rd :",x)

#O
1st : 50
2nd : 100
3rd : 20


Python Debugger (pdb)
+++++++++++++
The Python Debugger or pdb is a module for interactive code debugging.
Debugging is the process of removing errors from our code. 
Python Debugger or pdb is perhaps most simple usages is to insert a breakpoint:
import pdb; pdb.set_trace(). When reached, the debugger is started with the prompt “(Pdb).

Pdb command examples
help/h: Displays the list of commands
step/s: Single step the program, step into functions.
next/n: Single step in the current function
pp/p: Pretty printing/printing a variable
cont/c: Continue execution
quit/q: Quit the debugger


Operator Overloading
+++++++++++++++++++++
Overloading occurs when the same operator or function name is used with different signatures. 
We can use some operator symbols to define special member functions of a class. 
Operator overloading Provides convenient notations for object behaviors.

Operator  Expression  FUNCTION
Math Operator Overloading  
	Addition(+)  		p1 + p2  	p1.__add__(p2)
	Subtraction(-)  	p1 - p2  	p1.__sub__(p2)
	Multiplication(*)  	p1 * p2  	p1.__mul__(p2)
	Power(**)  		p1 ** p2 	p1.__pow__(p2)
	Division(/)  		p1 / p2  	p1.__truediv__(p2)
	Floor Division(//)  	p1 // p2  	p1.__floordiv__(p2)
	Remainder(%)  		p1 % p2  	p1.__mod__(p2)

import math
class Circle:
  def __init__(self,radius):
    self.__radius = radius
  def getradius(self):
    return self.__radius
  def setradius(self,radius):
    self.__radius = radius
  def area(self):
    return math.pi * self.__radius**2
  def __add__(self,othercircle):
    return Circle(self.getradius() + othercircle.getradius())
  def __lt__(self,othercircle):
    return (c1.getradius() < c2.getradius())
  def __gt__(self,othercircle):
    return (c1.getradius() > c2.getradius())
  def __str__(self):
    return ("Circle Area : "+str(self.area()))

c1 = Circle(6)
c2 = Circle(3)
c3 = c1 + c2
print (c1 < c2)
print (c1 > c2)

print (c3.getradius())
print (str(c3))

#O
False
True
9
Circle Area : 254.46900494077323


Closure and Nested Functions
+++++++++++++++++++++++++++++
A Closure is a function object that remembers values which are declared outside the functions.
In Functional programming Functions are first-class citizens i.e. Functions can be used as any other datatype.
Functional programming gives The ability to treat functions just like any other values.

Nested func
+++++++++++
def pop(lst):
  def mod(my_list):
    return my_list[len(my_list) - 1]
    
  lst.remove(mod(lst))
  return lst
  
a = [1,2,3,4,5]

print (pop(a))
print (pop(a))

#O
[1, 2, 3, 4]
[1, 2, 3]

closure
+++++++
#1
def outer(text):
  def inner():
    print (text)
  return inner

  
a = outer("Hello")
del outer
a()

#O
Hello

#2
def nth_pow(exp):
  def pow_of(base):
    return pow(base,exp)
  return pow_of
  
square = nth_pow(2)
for i in range (1,6):
  print (square(i))

#O
1
4
9
16
25


Decorators
+++++++++++++++++++
Decorators  wrap a function and modify its  behaviour in some way or the another, without directly  change  the source code of the function being decorated. 
Func that take other func as arg, add some functionality and returns other function. All this happens without altering the original source code.

def dec_star(func):
  def star():
    print ("*" * 10)
    func()
    print ("*" * 10)
  return star

def dec_amp(func):
  def amp():
    print ("#" * 10)
    func()
    print ("#" * 10)
  return amp

@dec_amp
@dec_star
def say_hello():
  print ("Hello World")


say_hello()  
#say = dec_amp(dec_star(say_hello))
#say()

#O
##########
**********
Hello World
**********
##########


Lambda, Reduce and Map function
+++++++++++++++++++++++++++++++++++
lambda usually used when func taken as a argument and return func as a argument
Lambda functions are also called one line functions or anonymous functions
Anonymous functions are particularly advantageous when using the map, filter and reduce functions. 
In Functional programming Functions are first-class citizens i.e. Functions can be used as any other datatype, 
eg: Arguments to function, Return values of functions, Assigned to variables, Parts of tuples, lists, etc. The lambda expression must fit on one line

lambda variables : expr
map 	(lambda/expr, iteratables)
filter 	(lambda/expr with condition, iteratable)
reduce 	(func, iteratable)	>> will return only one output

map
++++++
x = [1,2,3,4,5]
y = map(lambda x : x*2 , x)
print (list(y))

x = [1,2,3,4,5]
z = [6,7,8,9,0]
y = map(lambda x,y : x+y , x,z)
print (list(y))

filter
++++++++
a = [1,2,3,4,5,6]
b = filter(lambda i: i%2==0 , a)
print (list(b))

a = [1,2,3,4,5,6,7,8,9]
b = filter(lambda i: True if i>5 else False, a)
print (list(b))

reduce
++++++++
from functools import reduce

fi_sum = reduce(lambda x,y:x+y , fibo)
print (fi_sum)
#
from functools import reduce
fibo = [0,1]
sum = lambda x,y : x+y
for i in range (0,8):
  fibo.append(sum(fibo[len(fibo)-1] , fibo[len(fibo)-2]))
print (fibo)
fi_sum = reduce(lambda x,y:x+y , fibo)
print (fi_sum)


Iterators
++++++++++
Iteration is The process of going over a collections like lists, tuple, dict etc.in order to create our own Iterator class we need to implement
Iterators are the objects which can be iterated upon. 
An iterator object implements the iterator protocol and consist of the methods __iter__() and __next__().
__iter__() is used to get iterator and next() is used to  get next value. Also when the iterator is exhausted it raises StopIteration.
iter() function Creates a new iterator for an object.   

#
class ListIter:
  def __init__(self,mylist):
    self.mylist = mylist
    self.index = -1
  def __iter__(self):
    return self
  def __next__(self):
    self.index += 1
    return (self.mylist[self.index])

a = [1,2,3,4,5]
lst = ListIter(a)
it = iter(lst)
for i in a:
  print (next(it))


Generators
++++++++++
Generators are simple way defining iterators in python.
Similar to functions, but they keep the state of their variables between calls, and they use yield instead of return. 
Also calling them again resumes execution after the yield statement.
Python does not allow 'yield' inside a 'try' block with a 'finally' clause.  
With Generators we don't need to implement  __iter__() and __next__() methods. 
In addition The generators raise the StopIteration exception automatically, so generators are much easier to implement then iterators.

# 
def List_Gen(mylist):
  for i in mylist:
    yield i

a = [1,2,3,4,5]
lst = List_Gen(a)
for i in a:
  print (next(lst))


File Handling
++++++++++++++
To open a file in python we use open(). open() returns a file object, and is most commonly used with two arguments: open(filename, mode).
open() returns a “file handle” - a variable used to perform operations on the file
 	name = open("filename")		- opens the given file for reading, and returns a file object
	name.read() 			- file's entire contents as a string
	name.readline() 		- next line from file as a string
	name.readlines() 		- file's contents as a list of lines
r is for reading, if the file does not exist, an error is raised
w is for writing- If the file exists, the contents are overwritten.  If the file does not exist, it will be created
a is for appending- If the file exists new data is appended to the end of the file.  If the file does not exist, it will be created

#1
fh = open("demo.txt","w")
try:
    for i in range(1,11):
        fh.write("This is line number {}\n".format(i))
finally:
    fh.close()

#2
with open("demo.txt","w") as fh:
    for i in range (1,11):
        fh.write("This is line number {}\n".format(i))

#3
with open ("demo.txt") as fh:
    for i in fh:
        print (i.strip())

#4
dupe = []
with open ("demo.txt") as fh:
    for i in fh:
        if (i[:4] == "This"):
            dupe.append(i.strip())
print (dupe)


__name__ == "__main__"
++++++++++++++++++++++++

__name__ is a built in variable in Python. the value of __name__  is set to "__main__" at runtime. 
Each module has a name, and this name can be used to access instructions in a module. This is especially useful in a given situation: 
But what do we do if we want the block to run only if the module was started as a stand-alone program, but not if it was imported from another module? 
We can do this by evaluating the attribute __name__ of the module.


Exception Handling
+++++++++++++++++++++
An exception is an event, which happens while the execution of a program, that disrupts the normal flow of the program. 
When some error error occurs an exception is raised.  
Normally if we do not use Exception handling the execution of program stops as soon as exception is thrown.
By default, the interpreter handles exceptions by stopping the program and printing an error message.
Exception handling in Python.
	else:  statements executed if no exception
	finally:clean-up statements always executed 
#
try:
    a = int(input("Enter x value : "))
    b = int(input("Enter y value : "))
    c =  (a / b)
except TypeError as e:
    print ("Please enter number")
except ZeroDivisionError as e:
    print ("Please enter valid divider")
except ValueError as e:
    print ("Please enter number")
else:
    print ("Else Block c value ", c)
finally:
    print ("Complete of test run")

#
class CoffeeCup:
    def __init__(self,temp):
        self.temp = temp
    def drink(self):
        if (self.temp > 85):
            raise Exception("Coffee is too hot to drink")
        elif (self.temp < 65):
            raise Exception("Coffee is too cold to drink")
        else:
            print ("Coffee is too good to drink")
cup = CoffeeCup(78)
cup.drink()

#
class CoffeeTooHotException(Exception):
    def __init__(self,msg):
        super().__init__(msg)

class CoffeeTooColdException(Exception):
    def __init__(self,msg):
        super().__init__(msg)

class CoffeeCup:
    def __init__(self,temp):
        self.temp = temp
    def drink(self):
        if (self.temp > 85):
            raise CoffeeTooHotException("Coffee temperature : {}".format(self.temp))
        elif (self.temp < 65):
            raise CoffeeTooColdException("Coffee temperature : {}".format(self.temp))
        else:
            print ("Coffee is too good to drink")
cup = CoffeeCup(700)
cup.drink()


Abstraction
+++++++++++++
'abc' stands for Abstract Base Classes (ABCs) is a module we can import to create abstract classes in Python. 

from abc import ABC,abstractmethod

class shape(ABC):
	@abstractmethod
	def area(self): pass
	@abstractmethod
	def perimeter(self): pass
	
class square(shape):
	def __init__(self,side):
		self.side = side
	def area(self): 
		return (self.side * self.side)
	def perimeter(self): 
		return (4*self.side)	
Sh = square(10)
print ("Area : ",Sh.area())
print ("Perimeter : ",Sh.perimeter())


Inheritance
++++++++++++
Classes in Python can be extended, creating new classes which retain characteristics of the base class and This process, known as inheritance. 
Python Inheritance Involves a superclass  and a subclass. The subclass inherits the members of the superclass. 
When we define a subclass, we place the name of the parent(superclass) in parentheses after the subclass’s(child) name on the first line of the definition. 
   class Child(Parent):

#
class parameter:
	def setparam(self, width, height):
		self.__width = width
		self.__height = height
	def getwidth(self):
		return self.__width
	def getheight(self):
		return self.__height
    
class rectangle(parameter):
	def area(self):
		return (self.getwidth() * self.getheight())

class triangle(parameter):
	def area(self):
		return (self.getwidth() * self.getheight()/2)

rec = rectangle()
tri = triangle()
rec.setparam(10,100)
tri.setparam(10,100)
print ("Rectangle Area : {}\nTriangle Area : {}".format(rec.area(), tri.area()))


Import
+++++++

from <module name> import <class/function name> as <alias name>

Multilevel inheritance
++++++++++++++++++++++++++
class parameter:
  def setparam(self, width, height):
    self.__width = width
    self.__height = height
  def getwidth(self):
    return self.__width
  def getheight(self):
    return self.__height

class shape:
  def setcolor(self,color):
    self.__color = color
  def getcolor(self):
    return self.__color

class rectangle(parameter,shape):
  def area(self):
    return (self.getwidth() * self.getheight())

class triangle(parameter,shape):
  def area(self):
    return (self.getwidth() * self.getheight()/2)

rec = rectangle()
tri = triangle()
rec.setparam(10,100)
tri.setparam(10,100)
rec.setcolor("red")
tri.setcolor("blue")

print ("Rect Color : {}\nTri Color: {}".format(rec.getcolor(),tri.getcolor()))
print ("Rect Area : {}\nTri Area : {}".format(rec.area(), tri.area()))


Super()
++++++++++++
super() return a proxy object that delegates method calls to a parent or sibling class of type.
class.__mro__  attribute is a tuple of classes that are considered when looking for base classes during method resolution

#1
class parent:
  def __init__(self,name):
    print ("in parent __init__()",name)
    
class child(parent):
  def __init__(self):
    print ("in child __init__()")
    super().__init__("Abdul Rahman")

c = child()
#OP
in child __init__()
in parent __init__() Abdul Rahman


#2
class child(parent,parent2):
  def __init__(self):
    print ("in child __init__()")
    parent2.__init__(self,"Rahman",25)
    parent.__init__(self,"Rahman")


Composition
+++++++++++++
Composition allows us to delegate some responsibility from one class to another class.
In Class Composition one class acts like a Container and other acts like a content. 
Composition represents "part-of" relationship. 
when there is a composition between two Python classes , the content object cannot exist without the container object.

#
class Salary:
  def __init__(self,sal,bonus):
    self.sal = sal
    self.bonus = bonus
  def getsal(self):
    return (self.sal*12 + self.bonus)

class Employee:
  def __init__(self,name,age,sal,bonus):
    self.name = name
    self.age = age
    self.salary = Salary(sal,bonus)

  def annualsal(self):
    return self.salary.getsal()

e1 = Employee("Tom", 28, 35000, 20000)
print (e1.annualsal())


Aggregation 
++++++++++++
Aggregation represents Has-A relationship.
Aggregation has a unidirectional association i.e. a one way relationship between associated classes.
In Aggregation, both the associate class objects can survive individually.

#
class Salary:
  def __init__(self, sal, bonus):
    self.sal = sal
    self.bonus = bonus
  def getsalary(self):
    return (self.sal*12 + self.bonus)

class Employee:
  def __init__(self, name, age, salary):
    self.name = name
    self.age = age
    self.salary = salary
  def annualsal(self):
    return self.salary.getsalary()

salary = Salary(35000, 20000)
e1 = Employee("Mike", 29, salary)
print (e1.annualsal())


Encapsulation
++++++++++++++
It allow us to group data and the subroutines that operate on them together in one place, and to hide irrelevant details from the user.
Making objects and algorithms invisible to portions of the system that do not need them. Encapsulation promotes code reuse. 

#
class Rectangle:
  def __init__(self,width,height):
    self.__width = width
    self.__height = height
  def setwidth(self,val):
    self.__width = val
  def getwidth(self):
    return self.__width
  def setheight(self,val):
    self.__height = val
  def getheight(self):
    return self.height
  def area(self):
    return self.__width*self.__height

rect1 = Rectangle(10,10)
rect2 = Rectangle(9,8)
rect1.setwidth(15)
print (rect1.area())
print (rect2.area())


Private variable and method
+++++++++++++++++++++++++++++
A double underscore makes the variable Private  which makes it harder to access but still possible.

#
class Public:
  def __init__(self):
    self.a = "Public variable a"
    self.__b = "Private variable b"
  def __privatemethod(self):
    print ("In Private method..")
  def publicmethod(self):
    print ("In Public method..")
  def getPrivate(self):
    print (self.__b)
    self.__privatemethod()

access = Public()
print (access.a)
access.publicmethod()
access.getPrivate()

#O
Public variable a
In Public method..
Private variable b
In Private method..


Procedural and Object-Oriented Programming
+++++++++++++++++++++++++++++++++++++++++++

Procedural Programming 
----------------------------------------------
C, Pascal
unit – function
concentrates on creating functions
data and operations on the data are separated.
methodology requires sending data to procedure/functions.

Object-Oriented Programming
---------------------------------------------------------
C++, Java, Python
unit – class
concenteres on creating objects
Object: A single software unit that combines data and methods
Data in an object are known as attributes.
 Procedures/functions in an object are known as methods.


In Python, everything is an object i.e. integers, strings, dictionaries, …
Class objects are instantiated from user-defined classes. 
Classes in python can be defined anywhere in the program. 

#
class dummy:
  def __init__(self):
    print ("__init__ method")
  def atom():
    print ("Atom")
  atom()

dum = dummy()

#O
Atom
__init__ method


init and self
+++++++++++++++
__init__  method is used as a constructor for the class. 
Usually __init__  does some initialization work e.g. initialize attributes and other functions.
The arguments passed to the class name are given to its __init__() method. 
It would be incorrect to call __init__ constructor of the class. 

Self is the first argument of every method is a reference to the current instance of the class.  

multiple constructors in python
+++++++++++++++++++++++++++++++++
Unlike Java or C++, we cannot define multiple constructors in python. 
But, we can define a default value if one is not passed or we can use *args, **kwargs as arguments.


Function
++++++++++
Function is a block of statements within a program that perform as particular task.
It can be executed in order to perform overall program task.
There are two kinds of functions in Python, First are Built-in functions - print(), type(), float(), max() etc. 
Second type are Functions that we define ourselves and then use (user defined functions). 
Functions make you code Simpler, reusable i.e. write the code once and call it multiple times, easy to test and debug

Args
+++++++
Python allows us to  provide default values for a function’s arguments. These arguments are optional when the function is called.

Passing lists as arguments def sum(*args): - Lists can be passed in cases where there may be a variable number of arguments 
Passing dictionaries to functions def functionName(**kwargs).

#
class Student:
  def __init__(self, name, age, **marks):
    self.name = name
    self.age = age
    self.marks = marks
  def getrecord(self):
    print ("Name :",self.name)
    print ("Age :",self.age)
    print ("\nMarks")
    for key,val in self.marks.items():
      print ("{} : {}".format(key,val))

s1 = Student("Anbu", 25, History=86, Chemistry=87)
s1.getrecord()



